openapi: 3.0.0

info:
  description: Documento de la API de Unicast
  version: 1.0.2
  title: Swagger Unicast

servers:
  - url: "{protocol}://{host}:{port}/{basePath}"
    variables:
      host:
        default: ec2-35-181-26-7.eu-west-3.compute.amazonaws.com
      protocol:
        enum:
          - http
          - https
        default: http
      port:
        enum:
          - "8080"
          - "80"
        default: "8080"
      basePath:
        default: api

tags:
  - name: user
    description: Operaciones sobre usuarios
  - name: university
    description: Operaciones sobre universidades
  - name: subject
    description: Operaciones sobre asignaturas
# - name: video
#   description: Operaciones sobre vídeos

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    University:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    Subject:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    PaginationPage:
      type: object
      properties:
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer
        number:
          type: integer
      required:
        - size
        - totalElements
        - totalPages
        - number
    HalLink:
      type: object
      properties:
        href:
          type: string
          format: url
        templated:
          type: boolean
      required:
        - href
    GetResponse:
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              $ref: '#/components/schemas/HalLink'
            profile:
              $ref: '#/components/schemas/HalLink'
            search:
              $ref: '#/components/schemas/HalLink'
        page:
          $ref: '#/components/schemas/PaginationPage'
    UniversityGetEmbedded:
      type: object
      properties:
        universities:
          type: array
          items:
            $ref: '#/components/schemas/UniversityWithLinks'
    UniversityGetResponse:
      allOf:
        - type: object
          properties:
            _embedded:
              $ref: '#/components/schemas/UniversityGetEmbedded'
        - $ref: '#/components/schemas/GetResponse'
    UniversityWithLinks:
      allOf:
        - $ref: '#/components/schemas/University'
        - type: object
          properties:
            _links:
              type: object
              properties:
                self:
                  $ref: '#/components/schemas/HalLink'
                university:
                  $ref: '#/components/schemas/HalLink'
                users:
                  $ref: '#/components/schemas/HalLink'
                subjects:
                  $ref: '#/components/schemas/HalLink'
    SubjectGetEmbedded:
      type: object
      properties:
        subjects:
          type: array
          items:
            $ref: '#/components/schemas/SubjectWithLinks'
    SubjectGetResponse:
      allOf:
        - type: object
          properties:
            _embedded:
              $ref: '#/components/schemas/SubjectGetEmbedded'
        - $ref: '#/components/schemas/GetResponse'
    SubjectWithLinks:
      allOf:
        - $ref: '#/components/schemas/Subject'
        - type: object
          properties:
            _links:
              type: object
              properties:
                self:
                  $ref: '#/components/schemas/HalLink'
                university:
                  $ref: '#/components/schemas/HalLink'
                users:
                  $ref: '#/components/schemas/HalLink'
                subject:
                  $ref: '#/components/schemas/HalLink'
                videos:
                  $ref: '#/components/schemas/HalLink'

  #   NewUser:
  #     type: object
  #     properties:
  #       username:
  #         type: string
  #       password:
  #         type: string
  #   Video:
  #     type: object
  #     properties:
  #       title:
  #         type: string
  #       description:
  #         type: string

paths:
  /public/register:
    post:
      tags:
        - user
      summary: Registro de un nuevo usuario en el sistema
      description: Adicion de nuevos usuarios
      operationId: addUser
      requestBody:
        description: Usuario que se va a añadir
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  description: Nombre del nuevo usuario
                  type: string
                password:
                  description: Contraseña del nuevo usuario
                  type: string
                  format: password
                email:
                  description: Email del nuevo usuario
                  type: string
                  format: email
                description:
                  description: Descripción para el nuevo usuario
                  type: string
                university_id:
                  description: Universidad del usuario
                  type: integer
                photo:
                  description: Foto del usuario
                  type: string
                  format: binary
              required:
                - username
                - password
                - email
                - description
                - university_id
                - photo
            encoding:
              photo:
                contentType: image/png, image/jpeg
      responses:
        200:
          description: Usuario añadido con exito

  /public/authenticate:
    post:
      tags:
        - user
      summary: Autentificacion de usuarios
      description: Login a un usuario
      operationId: authUser
      requestBody:
        description: Usuario que se va a añadir
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  description: Nombre del usuario a comprobar
                  type: string
                password:
                  description: Contraseña del nuevo usuario
                  type: string
                  format: password
              required:
                - username
                - password
      responses:
        200:
          description: Devuelve el token en header Authorization y en el cuerpo
          content:
            text/plain:
              schema:
                type: string
                format: byte
          headers:
            Authorization:
              schema:
                type: string
              description: Token JWT a incluir en todas las peticiones

  /user/update:
    post:
      tags:
        - user
      summary: Actualizacion de un usuario en el sistema
      description: Actualizacion de usuarios
      operationId: updateUser
      requestBody:
        description: Usuario que se va a actualizar
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                user_id:
                  description: Id del usuario
                  type: integer
                username:
                  description: Nombre del usuario a actualizar
                  type: string
                password:
                  description: Contraseña del usuario a actualizar
                  type: string
                  format: password
                email:
                  description: Email del usuario a actualizar
                  type: string
                  format: email
                description:
                  description: Descripción para el usuario a actualizar
                  type: string
                university_id:
                  description: Universidad del usuario a actualizar
                  type: integer
                photo:
                  description: Foto del usuario a actualizar
                  type: string
                  format: binary
              required:
                - user_id
      responses:
        200:
          description: Usuario actualizado con exito
      security:
        - bearerAuth: []

  /universities:
    get:
      tags:
        - university
      summary: Lista de universidades
      operationId: getUniversities
      responses:
        200:
          description: Devuelve una lista de universidades
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/UniversityGetResponse'
      security:
        - bearerAuth: []
    post:
      tags:
        - university
      summary: Crear nueva universidad
      operationId: addUniversity
      requestBody:
        description: Universidad a añadir
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/University'
      responses:
        201:
          description: Devuelve la universidad que se ha creado
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/UniversityWithLinks'
      security:
        - bearerAuth: []

  /universities/{id}:
    patch:
      tags: 
        - university
      summary: Actualizar una universidad
      operationId: updateUniversity
      parameters:
        - name: id
          in: path
          description: Id de la universidad
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Contenido a editar
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/University'
      responses:
        201:
          description: Devuelve la universidad que se ha creado
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/UniversityWithLinks'
      security:
        - bearerAuth: []

  /subjects:
    get:
      tags:
        - subject
      summary: Lista de asignaturas
      operationId: getSubjects
      responses:
        200:
          description: Devuelve una lista de asignaturas
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/SubjectGetResponse'
      security:
        - bearerAuth: []
    post:
      tags:
        - subject
      summary: Crear nueva asignatura
      operationId: addSubject
      requestBody:
        description: Asignatura a añadir
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
      responses:
        201:
          description: Devuelve la asignatura que se ha creado
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/SubjectWithLinks'
      security:
        - bearerAuth: []

  /subjects/{id}:
    patch:
      tags: 
        - subject
      summary: Actualizar una asignatura
      operationId: updateSubject
      parameters:
        - name: id
          in: path
          description: Id de la asignatura
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Contenido a editar
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
      responses:
        201:
          description: Devuelve la asignatura que se ha creado
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/SubjectWithLinks'
      security:
        - bearerAuth: []

  # /videos:
  #   post:
  #     tags:
  #       - video
  #     summary: Subida de un nuevo video
  #     description: Adicion de nuevo video
  #     operationId: addVideo
  #     requestBody:
  #         description: Video que se va a añadir
  #         required: true
  #         content:
  #           multipart/form-data:
  #             schema:
  #               type: object
  #               properties:
  #                 video:
  #                   $ref: '#/components/schemas/Video'
  #                 subject_id:
  #                   description: Id de la asignatura en la que va el video
  #                   type: integer
  #                 file:
  #                   type: string
  #                   format: binary
  #             encoding:
  #               video:
  #                 contentType: application/json
  #     responses:
  #         200:
  #           description: Usuario añadido con exito
  #     security:
  #       - bearerAuth: []
