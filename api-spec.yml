openapi: 3.0.0

info:
  description: Documento de la API de Unicast
  version: 1.0.12
  title: Swagger Unicast

servers:
  - url: "{protocol}://{host}:{port}/{basePath}"
    variables:
      host:
        default: ec2-35-181-26-7.eu-west-3.compute.amazonaws.com
      protocol:
        enum:
          - http
          - https
        default: http
      port:
        enum:
          - "8080"
          - "80"
        default: "8080"
      basePath:
        default: api

tags:
  - name: user
    description: Operaciones sobre usuarios
  - name: university
    description: Operaciones sobre universidades
  - name: subject
    description: Operaciones sobre asignaturas
  - name: degree
    description: Operaciones sobre carreras
  - name: video
    description: Operaciones sobre vídeos

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    NoCacheHeaderParameter:
      in: header
      name: Cache-Control
      schema:
        type: string
        default: no-cache

    QueryParameter:
      name: page
      in: query
      schema:
        type: integer
      description: Número de la página a devolver

    SortParameter:
      name: sort
      in: query
      style: simple
      schema:
        type: array
        items:
          type: string
      description: Parámetros en la forma `($propertyname,)+[asc|desc]?`

  schemas:
    Token:
      type: object
      properties:
        id:
          type: integer
          format: int64
        token:
          type: string
      required:
        - token

    Video:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        timestamp:
          type: string
          format: date-time
        url:
          type: string
          format: url
        thumbnailUrl:
          type: string
          format: url
        # comments:
        # votes:
        # tags:

    VideoGetEmbedded:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            videos:
              type: array
              items:
                $ref: '#/components/schemas/Video'

    VideoGetResponse:
      allOf:
        - $ref: '#/components/schemas/GetResponse'
        - $ref: '#/components/schemas/VideoGetEmbedded'

    VideoToUpload:
      type: object
      properties:
        file:
          type: string
          format: binary
        thumbnail:
          type: string
          format: binary
        title:
          type: string
        description:
          type: string
        subject_id:
          type: integer
          format: int64
      required:
        - file
        - thumbnail
        - title
        - description
        - subject_id

    University:
      type: object
      discriminator:
        propertyName: name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        photo:
          type: string
          format: url
      required:
        - name
        - photo

    Subject:
      type: object
      discriminator:
        propertyName: name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        abbreviation:
          type: string
      required:
        - name
        - abbreviation

    PaginationPage:
      type: object
      properties:
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer
        number:
          type: integer
      required:
        - size
        - totalElements
        - totalPages
        - number

    GetResponse:
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PaginationPage'

    UniversityGetEmbedded:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            universities:
              type: array
              items:
                $ref: '#/components/schemas/University'

    UniversityGetResponse:
      allOf:
        - $ref: '#/components/schemas/GetResponse'
        - $ref: '#/components/schemas/UniversityGetEmbedded'

    SubjectGetEmbedded:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            subjects:
              type: array
              items:
                $ref: '#/components/schemas/Subject'

    SubjectGetResponse:
      allOf:
        - $ref: '#/components/schemas/GetResponse'
        - $ref: '#/components/schemas/SubjectGetEmbedded'

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        name:
          type: string
        surnames:
          type: string
        email:
          type: string
          format: email
        photo:
          type: string
          format: url
        description:
          type: string

    UserGetEmbedded:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'

    Degree:
      type: object
      discriminator:
        propertyName: name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      required:
        - name

    DegreeList:
      type: object
      properties:
        degrees:
          type: array
          items:
                $ref: '#/components/schemas/Degree'

    DegreeGetResponse:
      allOf:
        - $ref: '#/components/schemas/GetResponse'
        - $ref: '#/components/schemas/DegreeGetEmbedded'

    DegreeGetEmbedded:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            degrees:
              type: array
              items:
                $ref: '#/components/schemas/Degree'

paths:
  /public/register:
    post:
      tags:
        - user
      summary: Registro de un nuevo usuario en el sistema
      description: Adicion de nuevos usuarios
      operationId: addUser
      requestBody:
        description: Usuario que se va a añadir
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  description: Nombre de usuario del nuevo usuario
                  type: string
                password:
                  description: Contraseña del nuevo usuario
                  type: string
                  format: password
                name:
                  description: Nombre del nuevo usuario
                  type: string
                surnames:
                  description: Apellidos del nuevo usuario
                  type: string
                email:
                  description: Email del nuevo usuario
                  type: string
                  format: email
                description:
                  description: Descripción para el nuevo usuario
                  type: string
                university_id:
                  description: Universidad del usuario
                  type: integer
                  format: int64
                degree_id:
                  description: Carrera del usuario
                  type: integer
                  format: int64
                photo:
                  description: Foto del usuario
                  type: string
                  format: binary
              required:
                - username
                - password
                - name
                - surnames
                - email
                - description
                - university_id
                - degree_id
                - photo
            encoding:
              photo:
                contentType: image/png, image/jpeg
      responses:
        201:
          description: Usuario añadido con exito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /public/authenticate:
    post:
      tags:
        - user
      summary: Autentificacion de usuarios
      description: Login a un usuario
      operationId: authUser
      requestBody:
        description: Usuario que se va a añadir
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  description: Nombre del usuario a comprobar
                  type: string
                password:
                  description: Contraseña del nuevo usuario
                  type: string
                  format: password
              required:
                - username
                - password
      responses:
        200:
          description: Devuelve el token en header Authorization y en el cuerpo + id de usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          headers:
            Authorization:
              schema:
                type: string
              description: Token JWT a incluir en todas las peticiones

  /users/update:
    post:
      tags:
        - user
      summary: Actualizacion de un usuario en el sistema
      description: Actualizacion de usuarios
      operationId: updateUser
      requestBody:
        description: Usuario que se va a actualizar
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  description: Nuevo nombre del usuario
                  type: string
                password:
                  description: Nueva contraseña del usuario
                  type: string
                  format: password
                email:
                  description: Nuevo email del usuario
                  type: string
                  format: email
                description:
                  description: Nueva descripción para el usuario
                  type: string
                name:
                  description: Nuevo nombre para el usuario
                  type: string
                surnames:
                  description: Nuevos apellidos para el usuario
                  type: string
                university_id:
                  description: Nueva universidad del usuario
                  type: integer
                degree_id:
                  description: Nueva carrera del usuario
                  type: integer
                photo:
                  description: Nueva foto del usuario
                  type: string
                  format: binary
      responses:
        200:
          description: Devuelve usuario con campos actualizados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []


  /users/{id}:
    get:
      tags:
        - user
      summary: Obtener un usuario
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/NoCacheHeaderParameter'
        - name: id
          in: path
          description: Id del usuario
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Devuelve el usuario con el id dado
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []


  /users/{id}/subjects:
    get:
      tags:
        - user
      summary: Obtener las asignaturas de un usuario
      operationId: getSubjectsOfUser
      parameters:
        - $ref: '#/components/parameters/NoCacheHeaderParameter'
        - name: id
          in: path
          description: Id del usuario
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Devuelve las asignaturas de un usuario
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/SubjectGetEmbedded'
      security:
        - bearerAuth: []

  /users/search/nameStartsWith:
    get:
      tags:
        - user
      summary: Busca usuarios que empiecen por un nombre dado
      operationId: findUsersStartsWithName
      parameters:
        - $ref: '#/components/parameters/NoCacheHeaderParameter'
        - in: query
          name: name
          schema:
            type: string
          description: Comienzo del nombre del usuario a buscar
      responses:
        200:
          description: Lista de las usuarios encontradas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetEmbedded'
      security:
        - bearerAuth: []

  /users/search/usernameStartsWith:
    get:
      tags:
        - user
      summary: Busca usuarios que empiecen por un username dado
      operationId: findUsersStartsWithUsername
      parameters:
        - $ref: '#/components/parameters/NoCacheHeaderParameter'
        - in: query
          name: username
          schema:
            type: string
          description: Comienzo del username del usuario a buscar
      responses:
        200:
          description: Lista de las usuarios encontradas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetEmbedded'
      security:
        - bearerAuth: []

  /users/search/surnamesStartsWith:
    get:
      tags:
        - user
      summary: Busca usuarios que empiecen por unos apellidos dados
      operationId: findUsersStartsWithSurnames
      parameters:
        - $ref: '#/components/parameters/NoCacheHeaderParameter'
        - in: query
          name: surnames
          schema:
            type: string
          description: Comienzo de los apellidos del usuario a buscar
      responses:
        200:
          description: Devuelve una lista de usuarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetEmbedded'
      security:
        - bearerAuth: []


  /users/search/nameContaining:
    get:
      tags:
        - user
      summary: Busca usuarios que contengan una string en el nombre
      operationId: findUsersContainingName
      parameters:
        - $ref: '#/components/parameters/NoCacheHeaderParameter'
        - in: query
          name: name
          schema:
            type: string
          description: String a buscar en el nombre de usuarios
      responses:
        200:
          description: Devuelve una lista de usuarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetEmbedded'
      security:
        - bearerAuth: []
      
  /users/search/usernameContaining:
    get:
      tags:
        - user
      summary: Busca usuarios que contengan una string en el username
      operationId: findUsersContainingUsername
      parameters:
        - $ref: '#/components/parameters/NoCacheHeaderParameter'
        - in: query
          name: username
          schema:
            type: string
          description: String a buscar en el nombre de usuarios
      responses:
        200:
          description: Devuelve una lista de usuarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetEmbedded'
      security:
        - bearerAuth: []

  /users/search/surnamesContaining:
    get:
      tags:
        - user
      summary: Busca usuarios que contengan una string en los apellidos
      operationId: findUsersContainingSurname
      parameters:
        - $ref: '#/components/parameters/NoCacheHeaderParameter'
        - in: query
          name: surnames
          schema:
            type: string
          description: String a buscar en los apellidos de usuarios
      responses:
        200:
          description: Devuelve una lista de usuarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetEmbedded'
      security:
        - bearerAuth: []


  /degrees:
    get:
      tags:
        - degree
      summary: Lista de carreras
      operationId: getDegrees
      parameters:
        - $ref: '#/components/parameters/NoCacheHeaderParameter'
        - $ref: '#/components/parameters/QueryParameter'
        - $ref: '#/components/parameters/SortParameter'
      responses:
        200:
          description: Devuelve una lista de carreras
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/DegreeGetResponse'
    post:
      tags:
        - degree
      summary: Crear nueva carrera
      operationId: addDegree
      requestBody:
        description: Carrera a añadir
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Degree'
      responses:
        201:
          description: Devuelve la carrera que se ha creado
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Degree'
      security:
        - bearerAuth: []

  /degrees/{id}:
    patch:
      tags:
        - degree
      summary: Actualizar una carrera
      operationId: updateDegree
      parameters:
        - name: id
          in: path
          description: Id de la carrera
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Contenido a editar
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Degree'
      responses:
        200:
          description: Devuelve la carrera que se ha actualizado
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Degree'
      security:
        - bearerAuth: []

  /degrees/search/nameStartsWith:
    get:
      tags:
        - degree
      summary: Busca carreras que empiecen por el nombre dado
      operationId: findDegreesStartsWith
      parameters:
        - $ref: '#/components/parameters/NoCacheHeaderParameter'
        - in: query
          name: name
          schema:
            type: string
          description: Comienzo del nombre de la carrera a buscar
      responses:
        200:
          description: Lista de las carreras encontradas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DegreeGetEmbedded'
      
  /degrees/search/nameContaining:
    get:
      tags:
        - degree
      summary: Busca carreras que contengan una string en el nombre
      operationId: findDegreesContainingName
      parameters:
        - $ref: '#/components/parameters/NoCacheHeaderParameter'
        - in: query
          name: name
          schema:
            type: string
          description: String a buscar en el nombre de carreras
      responses:
        200:
          description: Devuelve una lista de carreras
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DegreeGetResponse'

  /universities:
    get:
      tags:
        - university
      summary: Lista de universidades
      operationId: getUniversities
      parameters:
        - $ref: '#/components/parameters/NoCacheHeaderParameter'
        - $ref: '#/components/parameters/QueryParameter'
        - $ref: '#/components/parameters/SortParameter'
      responses:
        200:
          description: Devuelve una lista de universidades
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/UniversityGetResponse'

  /universities/add:
    post:
      tags:
        - university
      summary: Crear nueva universidad
      operationId: addUniversity
      requestBody:
        description: Universidad a añadir
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  description: Nombre de la nueva universidad
                  type: string
                photo:
                  description: Contraseña del nuevo usuario
                  type: string
                  format: binary
              required:
                - name
                - photo
      responses:
        201:
          description: Devuelve la universidad que se ha creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/University'
      security:
        - bearerAuth: []

    

  # TODO: gestionar que la foto es un fichero
  # /universities/{id}:
    # patch:
    #   tags:
    #     - university
    #   summary: Actualizar una universidad
    #   operationId: updateUniversity
    #   parameters:
    #     - name: id
    #       in: path
    #       description: Id de la universidad
    #       required: true
    #       schema:
    #         type: integer
    #         format: int64
    #   requestBody:
    #     description: Contenido a editar
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/University'
    #   responses:
    #     200:
    #       description: Devuelve la universidad que se ha actualizado
    #       content:
    #         application/hal+json:
    #           schema:
    #             $ref: '#/components/schemas/University'
    #   security:
    #     - bearerAuth: []

  /universities/search/nameStartsWith:
    get:
      tags:
        - university
      summary: Busca universidades que empiecen por el nombre dado
      operationId: findUniversitiesStartsWith
      parameters:
        - $ref: '#/components/parameters/NoCacheHeaderParameter'
        - in: query
          name: name
          schema:
            type: string
          description: Comienzo del nombre de la universidad a buscar
      responses:
        200:
          description: Lista de las universidadas encontradas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UniversityGetEmbedded'

  /universities/search/nameContaining:
    get:
      tags:
        - university
      summary: Busca universidades que contengan en el nombre la string dada
      operationId: findUniversitiesContaining
      parameters:
        - $ref: '#/components/parameters/NoCacheHeaderParameter'
        - in: query
          name: name
          schema:
            type: string
          description: String a buscar en el nombre
      responses:
        200:
          description: Lista de las universidadas encontradas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UniversityGetEmbedded'

  /subjects:
    get:
      tags:
        - subject
      summary: Lista de asignaturas
      operationId: getSubjects
      parameters:
        - $ref: '#/components/parameters/NoCacheHeaderParameter'
        - $ref: '#/components/parameters/QueryParameter'
        - $ref: '#/components/parameters/SortParameter'
      responses:
        200:
          description: Devuelve una lista de asignaturas
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/SubjectGetResponse'
    post:
      tags:
        - subject
      summary: Crear nueva asignatura
      operationId: addSubject
      requestBody:
        description: Asignatura a añadir
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
      responses:
        201:
          description: Devuelve la asignatura que se ha creado
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Subject'
      security:
        - bearerAuth: []

  /subjects/{id}:
    patch:
      tags:
        - subject
      summary: Actualizar una asignatura
      operationId: updateSubject
      parameters:
        - name: id
          in: path
          description: Id de la asignatura
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Contenido a editar
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
      responses:
        200:
          description: Devuelve la asignatura que se ha actualizado
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Subject'
      security:
        - bearerAuth: []

  /subjects/{id}/users:
    put:
      tags:
        - subject
      summary: Relacionar un usuario con una asignatura (tanto profesores como alumnos)
      operationId: putUser
      parameters:
        - name: id
          in: path
          description: Id de la asignatura
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Link del usuario a asociar con la asignatura
        required: true
        content:
          text/uri-list:
            schema:
              type: integer
              format: int64
      responses:
        204:
          description: Se ha relacionado el/los usuarios con la asignatura
      security:
        - bearerAuth: []

  /subjects/{id}/videos:
    get:
      tags:
        - subject
      summary: Devuelve una lista con los videos de una asignatura
      operationId: getVideosFromSubject
      parameters:
        - $ref: '#/components/parameters/NoCacheHeaderParameter'
        - name: id
          in: path
          description: Id de la asignatura
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Lista de los videos encontrados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoGetEmbedded'
      security:
        - bearerAuth: []

  /subjects/{subject_id}/users/{user_id}:
    delete:
      tags:
          - subject
      summary: Elimina el usuario de la relacion con asignatura
      operationId: deleteUserFromSubject
      parameters:
        - name: user_id
          in: path
          description: Id del usuario
          required: true
          schema:
            type: integer
            format: int64
        - name: subject_id
          in: path
          description: Id de la asignatura
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: Se ha eliminado con exito
      security:
        - bearerAuth: []

  /subjects/search/nameStartsWith:
    get:
      tags:
        - subject
      summary: Busca asignaturas que empiecen por un nombre dado
      operationId: findSubjectsStartsWithName
      parameters:
        - $ref: '#/components/parameters/NoCacheHeaderParameter'
        - in: query
          name: name
          schema:
            type: string
          description: Comienzo del nombre de la asignatura a buscar
      responses:
        200:
          description: Lista de las asignaturas encontradas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectGetEmbedded'
    
  /subjects/search/nameContaining:
    get:
      tags:
        - subject
      summary: Busca asignaturas que contengan una string en el nombre
      operationId: findSubjectsContainingName
      parameters:
        - $ref: '#/components/parameters/NoCacheHeaderParameter'
        - in: query
          name: name
          schema:
            type: string
          description: String a buscar en el nombre de asignaturas
      responses:
        200:
          description: Devuelve una lista de asignaturas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectGetResponse'


  # TODO: Aqui faltaria documentar respuesta, pero este endpoint lo cambiaremos por
  # sistema de recomendaciones (?)
  /videos:
    get:
      tags:
        - video
      summary: Lista de videos
      operationId: getVideos
      parameters:
        - $ref: '#/components/parameters/NoCacheHeaderParameter'
        - $ref: '#/components/parameters/QueryParameter'
        - $ref: '#/components/parameters/SortParameter'
      responses:
        200:
          description: Devuelve una lista de videos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoGetResponse'
      security:
        - bearerAuth: []

  /upload/video:
    post:
      tags:
        - video
      summary: Subida de un nuevo video
      description: Adicion de nuevo video
      operationId: addVideo
      requestBody:
          description: Video que se va a añadir
          required: true
          content:
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/VideoToUpload'
      responses:
        201:
          description: Video añadido con exito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
      security:
        - bearerAuth: []

  /videos/search/titleContaining:
    get:
      tags:
        - video
      summary: Busca videos que contengan una string en el titulo
      operationId: findVideosContainingTitle
      parameters:
        - $ref: '#/components/parameters/NoCacheHeaderParameter'
        - in: query
          name: title
          schema:
            type: string
          description: String a buscar en el titulo de videos
      responses:
        200:
          description: Devuelve una lista de videos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoGetResponse'
      security:
        - bearerAuth: []

  /videos/search/titleStartsWith:
    get:
      tags:
        - video
      summary: Busca videos que empiecen por un nombre dado
      operationId: findVideosStartsWithTitle
      parameters:
        - $ref: '#/components/parameters/NoCacheHeaderParameter'
        - in: query
          name: title
          schema:
            type: string
          description: Comienzo del nombre de los videos a buscar
      responses:
        200:
          description: Lista de los videos encontradas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
      security:
        - bearerAuth: []
